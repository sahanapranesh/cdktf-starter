import { IamPolicy } from '@cdktf/provider-aws/lib/iam-policy';
import { IamRole } from '@cdktf/provider-aws/lib/iam-role';
import { IamRolePolicyAttachment } from '@cdktf/provider-aws/lib/iam-role-policy-attachment';
import { Construct } from 'constructs';

export interface IPrincipal {
  grant(grantName: string, actions: string[], ...resources: string[]): void;
}

export interface AwsIamRoleConfig {
  tags: any;
}

export class AwsIamRole extends Construct implements IPrincipal {
  public readonly ecsTaskExecutionRole: IamRole;
  public readonly ecsTaskRole: IamRole;

  constructor(scope: Construct, name: string, config: AwsIamRoleConfig) {
    super(scope, name);

    // Role that allows us to get the Docker image
    this.ecsTaskExecutionRole = new IamRole(scope, 'execution-role', {
      name: `${name}-execution-role`,
      tags: config.tags,
      inlinePolicy: [
        {
          name: 'allow-ecr-pull',
          policy: JSON.stringify({
            Version: '2012-10-17',
            Statement: [
              {
                Effect: 'Allow',
                Action: [
                  'ecr:GetAuthorizationToken',
                  'ecr:BatchCheckLayerAvailability',
                  'ecr:GetDownloadUrlForLayer',
                  'ecr:BatchGetImage',
                  'logs:CreateLogStream',
                  'logs:PutLogEvents',
                ],
                Resource: '*',
              },
            ],
          }),
        },
      ],
      // this role shall only be used by an ECS task
      assumeRolePolicy: JSON.stringify({
        Version: '2012-10-17',
        Statement: [
          {
            Action: 'sts:AssumeRole',
            Effect: 'Allow',
            Sid: '',
            Principal: {
              Service: 'ecs-tasks.amazonaws.com',
            },
          },
        ],
      }),
    });

    // Role that allows us to push logs
    this.ecsTaskRole = new IamRole(scope, 'task-role', {
      name: `${name}-task-role`,
      tags: config.tags,
      inlinePolicy: [
        {
          name: 'allow-logs',
          policy: JSON.stringify({
            Version: '2012-10-17',
            Statement: [
              {
                Effect: 'Allow',
                Action: ['logs:CreateLogStream', 'logs:PutLogEvents'],
                Resource: '*',
              },
            ],
          }),
        },
      ],
      assumeRolePolicy: JSON.stringify({
        Version: '2012-10-17',
        Statement: [
          {
            Action: 'sts:AssumeRole',
            Effect: 'Allow',
            Sid: '',
            Principal: {
              Service: 'ecs-tasks.amazonaws.com',
            },
          },
        ],
      }),
    });
  }

  public grant(grantName: string, actions: string[], ...resources: string[]) {
    const policy = new IamPolicy(this, grantName + '-policy', {
      namePrefix: grantName,
      description: 'automatically generated by cdktf',
      policy: JSON.stringify({
        Version: '2012-10-17',
        Statement: [
          {
            Effect: 'Allow',
            Action: actions,
            Resource: resources.length > 0 ? resources : ['*'],
          },
        ],
      }),
    });

    new IamRolePolicyAttachment(this, grantName + '-policy-attachment', {
      role: this.ecsTaskExecutionRole.name!,
      policyArn: policy.arn,
    });
  }
}